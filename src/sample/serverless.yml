service: s4-api

custom:
  deployTable: ${self:service}-${opt:stage, self:provider.stage}-deployTable
  contentTable: ${self:service}-${opt:stage, self:provider.stage}-contentTable
  snsTopic: ${self:service}-${opt:stage, self:provider.stage}
  stackPrefix: ${self:service}-${opt:stage, self:provider.stage}-
  dynamodb:
    start:
      inMemory: true
      migrate: true
  dev:
    dataDeletionPolicy: 'Delete'
    tracing: true

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 1024
  timeout: 6
  environment:
    SNS_TOPIC: { "Fn::Join" : [ ":", [ "arn:aws:sns:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.snsTopic}" ] ] }
    STACK_PREFIX: ${self:custom.stackPrefix}
    AWS_XRAY_TRACING_NAME: ${self:service}-${opt:stage, self:provider.stage}-UNTITLED-service
  tracing: ${self:custom.${opt:stage, self:provider.stage}.tracing, 'true'}

functions:

  deploys:
    handler: src/handler/deploys.handler
    environment:
      DYNAMODB_TABLE: ${self:custom.deployTable}
      AWS_XRAY_TRACING_NAME: ${self:service}-${opt:stage, self:provider.stage}-deploys-service
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: { "Fn::Join" : [ ":", [ "arn:aws:dynamodb:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.deployTable}" ] ] }
    events:
      - http:
          path: deploys
          method: get
          cors: true
      - http:
          path: deploys
          method: post
          cors: true
      - http:
          path: deploys/{id}
          method: get
          cors: true
      - http:
          path: deploys/{id}/events
          method: get
          cors: true
      - http:
          path: deploys/{id}
          method: delete
          cors: true

  content:
    handler: src/handler/content.handler
    environment:
      DYNAMODB_TABLE: ${self:custom.contentTable}
      AWS_XRAY_TRACING_NAME: ${self:service}-${opt:stage, self:provider.stage}-content-service
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: { "Fn::Join" : [ ":", [ "arn:aws:dynamodb:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.contentTable}" ] ] }
    events:
      - http:
          path: content
          method: get
          cors: true
      - http:
          path: content
          method: post
          cors: true
      - http:
          path: content/{id}
          method: get
          cors: true
      - http:
          path: content/{id}/events
          method: get
          cors: true
      - http:
          path: content/{id}
          method: delete
          cors: true

  notifications:
    handler: src/handler/notifications.handler
    environment:
      AWS_XRAY_TRACING_NAME: ${self:service}-${opt:stage, self:provider.stage}-notifications-service
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    #  - Effect: Allow
    #    Action:
    #      - cloudformation:CreateChangeSet
    #      - cloudformation:ExecuteChangeSet
    #    Resource: { "Fn::Join" : [ ":", [ "arn:aws:cloudformation:${opt:region, self:provider.region}", { "Ref" : "AWS::AccountId" }, "stack/${self:custom.stackPrefix}*" ] ] }
    events:      
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DeployTable
              - StreamArn
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ContentTable
              - StreamArn
    #  - sns: ${self:custom.snsTopic}

resources:
  Resources:
    DeployTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${opt:stage, self:provider.stage}.dataDeletionPolicy, 'Retain'}
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: number
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: number
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:custom.deployTable}
    ContentTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${opt:stage, self:provider.stage}.dataDeletionPolicy, 'Retain'}
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: number
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: number
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:custom.contentTable}
